/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  InitializableAdminUpgradeabilityProxy,
  InitializableAdminUpgradeabilityProxyInterface,
} from "../../../../dependencies/openzeppelin/upgradeability/InitializableAdminUpgradeabilityProxy";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [],
    name: "admin",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "changeAdmin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "implementation",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "logic",
        type: "address",
      },
      {
        internalType: "address",
        name: "admin",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_logic",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610fa5806100206000396000f3fe6080604052600436106100745760003560e01c80638f2839701161004e5780638f283970146100ef578063cf7a1d7714610118578063d1f5789414610134578063f851a4401461015057610075565b80633659cfe61461007f5780634f1ef286146100a85780635c60da1b146100c457610075565b5b61007d61017b565b005b34801561008b57600080fd5b506100a660048036038101906100a191906108ec565b610195565b005b6100c260048036038101906100bd919061097e565b6101ea565b005b3480156100d057600080fd5b506100d96102b9565b6040516100e691906109ed565b60405180910390f35b3480156100fb57600080fd5b50610116600480360381019061011191906108ec565b610311565b005b610132600480360381019061012d9190610b49565b610416565b005b61014e60048036038101906101499190610bb8565b6104d3565b005b34801561015c57600080fd5b50610165610606565b60405161017291906109ed565b60405180910390f35b61018361065e565b61019361018e610668565b610699565b565b61019d6106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156101de576101d9816106f0565b6101e7565b6101e661017b565b5b50565b6101f26106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102ab5761022e836106f0565b60008373ffffffffffffffffffffffffffffffffffffffff168383604051610257929190610c44565b600060405180830381855af49150503d8060008114610292576040519150601f19603f3d011682016040523d82523d6000602084013e610297565b606091505b50509050806102a557600080fd5b506102b4565b6102b361017b565b5b505050565b60006102c36106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415610305576102fe610668565b905061030e565b61030d61017b565b5b90565b6103196106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561040a57600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156103bc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b390610ce0565b60405180910390fd5b7f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f6103e56106bf565b826040516103f4929190610d00565b60405180910390a16104058161073f565b610413565b61041261017b565b5b50565b600073ffffffffffffffffffffffffffffffffffffffff16610436610668565b73ffffffffffffffffffffffffffffffffffffffff161461045657600080fd5b61046083826104d3565b60017fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610460001c6104909190610d62565b60001b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b146104c5576104c4610d96565b5b6104ce8261073f565b505050565b600073ffffffffffffffffffffffffffffffffffffffff166104f3610668565b73ffffffffffffffffffffffffffffffffffffffff161461051357600080fd5b60017f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbd60001c6105439190610d62565b60001b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b1461057857610577610d96565b5b6105818261076e565b6000815111156106025760008273ffffffffffffffffffffffffffffffffffffffff16826040516105b29190610e34565b600060405180830381855af49150503d80600081146105ed576040519150601f19603f3d011682016040523d82523d6000602084013e6105f2565b606091505b505090508061060057600080fd5b505b5050565b60006106106106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156106525761064b6106bf565b905061065b565b61065a61017b565b5b90565b6106666107e5565b565b6000807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b9050805491505090565b3660008037600080366000845af43d6000803e80600081146106ba573d6000f35b3d6000fd5b6000807fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b9050805491505090565b6106f98161076e565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60007fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610360001b90508181555050565b61077781610865565b6107b6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ad90610ebd565b60405180910390fd5b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b90508181555050565b6107ed6106bf565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290610f4f565b60405180910390fd5b610863610878565b565b600080823b905060008111915050919050565b565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006108b98261088e565b9050919050565b6108c9816108ae565b81146108d457600080fd5b50565b6000813590506108e6816108c0565b92915050565b60006020828403121561090257610901610884565b5b6000610910848285016108d7565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261093e5761093d610919565b5b8235905067ffffffffffffffff81111561095b5761095a61091e565b5b60208301915083600182028301111561097757610976610923565b5b9250929050565b60008060006040848603121561099757610996610884565b5b60006109a5868287016108d7565b935050602084013567ffffffffffffffff8111156109c6576109c5610889565b5b6109d286828701610928565b92509250509250925092565b6109e7816108ae565b82525050565b6000602082019050610a0260008301846109de565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610a5682610a0d565b810181811067ffffffffffffffff82111715610a7557610a74610a1e565b5b80604052505050565b6000610a8861087a565b9050610a948282610a4d565b919050565b600067ffffffffffffffff821115610ab457610ab3610a1e565b5b610abd82610a0d565b9050602081019050919050565b82818337600083830152505050565b6000610aec610ae784610a99565b610a7e565b905082815260208101848484011115610b0857610b07610a08565b5b610b13848285610aca565b509392505050565b600082601f830112610b3057610b2f610919565b5b8135610b40848260208601610ad9565b91505092915050565b600080600060608486031215610b6257610b61610884565b5b6000610b70868287016108d7565b9350506020610b81868287016108d7565b925050604084013567ffffffffffffffff811115610ba257610ba1610889565b5b610bae86828701610b1b565b9150509250925092565b60008060408385031215610bcf57610bce610884565b5b6000610bdd858286016108d7565b925050602083013567ffffffffffffffff811115610bfe57610bfd610889565b5b610c0a85828601610b1b565b9150509250929050565b600081905092915050565b6000610c2b8385610c14565b9350610c38838584610aca565b82840190509392505050565b6000610c51828486610c1f565b91508190509392505050565b600082825260208201905092915050565b7f43616e6e6f74206368616e6765207468652061646d696e206f6620612070726f60008201527f787920746f20746865207a65726f206164647265737300000000000000000000602082015250565b6000610cca603683610c5d565b9150610cd582610c6e565b604082019050919050565b60006020820190508181036000830152610cf981610cbd565b9050919050565b6000604082019050610d1560008301856109de565b610d2260208301846109de565b9392505050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d6d82610d29565b9150610d7883610d29565b925082821015610d8b57610d8a610d33565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b600081519050919050565b60005b83811015610dee578082015181840152602081019050610dd3565b83811115610dfd576000848401525b50505050565b6000610e0e82610dc5565b610e188185610c14565b9350610e28818560208601610dd0565b80840191505092915050565b6000610e408284610e03565b915081905092915050565b7f43616e6e6f742073657420612070726f787920696d706c656d656e746174696f60008201527f6e20746f2061206e6f6e2d636f6e747261637420616464726573730000000000602082015250565b6000610ea7603b83610c5d565b9150610eb282610e4b565b604082019050919050565b60006020820190508181036000830152610ed681610e9a565b9050919050565b7f43616e6e6f742063616c6c2066616c6c6261636b2066756e6374696f6e20667260008201527f6f6d207468652070726f78792061646d696e0000000000000000000000000000602082015250565b6000610f39603283610c5d565b9150610f4482610edd565b604082019050919050565b60006020820190508181036000830152610f6881610f2c565b905091905056fea26469706673582212200ba9f9671bd899151ed96d020e060a8063dbfdb4f8df78c13f2ab37a687c51a164736f6c63430008090033";

type InitializableAdminUpgradeabilityProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitializableAdminUpgradeabilityProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InitializableAdminUpgradeabilityProxy__factory extends ContractFactory {
  constructor(...args: InitializableAdminUpgradeabilityProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InitializableAdminUpgradeabilityProxy> {
    return super.deploy(
      overrides || {}
    ) as Promise<InitializableAdminUpgradeabilityProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InitializableAdminUpgradeabilityProxy {
    return super.attach(address) as InitializableAdminUpgradeabilityProxy;
  }
  override connect(
    signer: Signer
  ): InitializableAdminUpgradeabilityProxy__factory {
    return super.connect(
      signer
    ) as InitializableAdminUpgradeabilityProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitializableAdminUpgradeabilityProxyInterface {
    return new utils.Interface(
      _abi
    ) as InitializableAdminUpgradeabilityProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InitializableAdminUpgradeabilityProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as InitializableAdminUpgradeabilityProxy;
  }
}
